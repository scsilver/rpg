{"version":3,"sources":["../../src/store/state.js"],"names":["console","log","state","game","biomes","characters","fullScreenPane","visible","display","effectsPane","red","newGameWizard","world","time","options","baseHeight","heightVariance","amount","side","jobs","races","orePicker","oreOptions","Math","floor","random","length","biomePicker","newBiomes","mountain","getRandomFromObject","cells","player","mentalState","interaction","environment","emoji","emojis","inventory","name","race","job","height","age","agility","attack","defense","health","hunger","xp","position","x","y","orientationDeg","cell","movementCell","cellHistory","saves","patternToOffsetArray","args","rOffsets","xOffsets","yOffsets","offSetArray","map","push","rOffset","xOffset","yOffset","offSetsPattern","r","type","_","times","radialOffset","cellList","character","callList","checkCell","categoryName","categoryOptions","forwardMovementCell","values","categoryOption","playerInteraction","filter","option","checkDistantCell","playerDistantView","checkMovementCell","distantBiomeCheckState","biomeCheckState","characterCheckState","characterAheadCheckState","charaters","playerMentalState","playerPosition","updateState","updateGame","updateWorld","updatePlayer","saveGame","loadGame","gameIndex","newGame","newWorld","clearGameInterval","characterCells","gameTimeHandler","startGameInterval","gameInterval","setInterval","clearInterval","handleNewGameWizardClick","includes","handleFullScreenDisplayClick","inputHandler","e","inputKey","inputType","targetValueNumber","Number","parseInt","target","value","handleKeyPress","event","key","movePlayer","handleKeyPressThrottled","throttle","leading","movePlayerForward","movementOrientation","atan2","PI","newMovementCell","newState","turnMovementCell","newForwardMovementCell","finalState","module","exports"],"mappings":"oQAAA;AACA;AACA;AACA;;;;;;AAMA;AACA,gD;AACA,gC;AACAA,QAAQC,GAAR,CAAY,IAAZ;AACA,IAAMC,QAAQ,sBAAW;AACrBC,UAAM;AACFC,kCADE;AAEFC,0CAFE;AAGFC,wBAAgB;AACZC,qBAAS,KADG;AAEZC,qBAAS,EAFG,EAHd;;AAOFC,qBAAa;AACTC,iBAAK,KADI,EAPX;;AAUFC,uBAAe;AACXJ,qBAAS,KADE,EAVb;;AAaFK,eAAO;AACHC,kBAAM,CADH;AAEHC,qBAAS;AACLC,4BAAY,CADP;AAELC,gCAAgB,GAFX;AAGLC,wBAAQ,GAHH;AAILC,sBAAM,EAJD;AAKLC,sBAAM,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,CALD;AAMLC,uBAAO,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB,CANF;AAOLC,2BAAW;AACPC,mCAAWC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBH,WAAWI,MAAtC,CAAX,CADO,GAPN;AASLC,6BAAa,uBAAM;AACf,wBAAIC,YAAYxB,kBAAhB;AACA,2BAAOwB,UAAUC,QAAjB;AACA,2BAAO,4BAAcD,SAAd,EAAyBE,mBAAzB,EAAP;AACH,iBAbI,EAFN;;AAiBHC,mBAAO,EAjBJ;AAkBH1B,wBAAY,EAlBT,EAbL;;AAiCF2B,gBAAQ;AACJC,yBAAa;AACTC,6BAAa,iBADJ;AAETC,6BAAa,aAFJ,EADT;;AAKJC,mBAAOC,iBAAOL,MALV;AAMJM,uBAAW,EANP;AAOJC,kBAAM,OAPF;AAQJC,kBAAM,UARF;AASJC,iBAAK,MATD;AAUJC,oBAAQ,EAVJ;AAWJC,iBAAK,EAXD;AAYJC,qBAAS,CAZL;AAaJC,oBAAQ,CAbJ;AAcJC,qBAAS,CAdL;AAeJC,oBAAQ,GAfJ;AAgBJC,oBAAQ,GAhBJ;AAiBJC,gBAAI,CAjBA;AAkBJC,sBAAU;AACNC,mBAAG,CADG;AAENC,mBAAG,CAFG;AAGNC,gCAAgB,GAHV;AAINC,sBAAM,EAJA;AAKNC,8BAAc,EALR,EAlBN,EAjCN,EADe;;;;;AA8DrBC,iBAAa,EA9DQ;AA+DrBC,WAAO,EA/Dc,EAAX,CAAd;;;AAkEA;AACA;AACA,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,IAAD,EAAU;AAC3BC,YAD2B,GACMD,IADN,CAC3BC,QAD2B,CACjBC,QADiB,GACMF,IADN,CACjBE,QADiB,CACPC,QADO,GACMH,IADN,CACPG,QADO;AAEnC,QAAIC,cAAc,EAAlB;AACAH,aAASI,GAAT,CAAa,gCAAgBH,SAASG,GAAT,CAAa,2BAAWF,SAASE,GAAT,CAAa,mBAAW;AACzED,4BAAYE,IAAZ,CAAiB,EAAEd,GAAGe,UAAUC,OAAf,EAAwBf,GAAGc,UAAUE,OAArC,EAAjB;AACH,aAFoD,CAAX,EAAb,CAAhB,EAAb;AAGA,WAAOL,WAAP;AACH,CAPD;AAQA,IAAMM,iBAAiB,SAAjBA,cAAiB,CAACC,CAAD,EAAIC,IAAJ,EAAa;AAChC,YAAQA,IAAR;AACI,aAAK,OAAL;AACIb,iCAAqB,EAAEE,UAAUY,iBAAEC,KAAF,CAAQH,CAAR,EAAW,gCAAgBI,YAAhB,EAAX,CAAZ,EAAsDb,UAAU,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAhE,EAA4EC,UAAU,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAtF,EAArB;AACA;AACJ,aAAK,MAAL;AACIJ,iCAAqB,EAAEE,UAAUY,iBAAEC,KAAF,CAAQH,CAAR,EAAW,gCAAgBI,YAAhB,EAAX,CAAZ,EAAsDb,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAhE,EAAwEC,UAAU,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAlF,EAArB;AACA;AACJ,aAAK,OAAL;AACIJ,iCAAqB,EAAEE,UAAUY,iBAAEC,KAAF,CAAQH,CAAR,EAAW,gCAAgBI,YAAhB,EAAX,CAAZ,EAAsDb,UAAU,CAAC,CAAD,CAAhE,EAAqEC,UAAU,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAA/E,EAArB;;AAEA;;AAEJ;AACI,kBAbR;;AAeH,CAhBD;AAiBA,IAAMa,WAAW,SAAXA,QAAW,CAACrB,IAAD,EAAOsB,SAAP,EAAkBb,WAAlB,EAAkC;AAC/C,QAAIc,WAAW,EAAf;AACAhB,aAASG,GAAT,CAAa,2BAAWF,SAASE,GAAT,CAAa,mBAAW;AAC5Ca,qBAASZ,IAAT,CAAc,qCAAkB,EAAEd,GAAGG,KAAKJ,QAAL,CAAcC,CAAd,GAAkBgB,OAAvB,EAAgCf,GAAGE,KAAKJ,QAAL,CAAcE,CAAd,GAAkBgB,OAArD,EAAlB,CAAd;AACH,SAFuB,CAAX,EAAb;AAGA,WAAOO,QAAP;AACH,CAND;;AAQA,IAAMG,YAAY,SAAZA,SAAY;AACdC,YADc;AAEdC,eAFc;AAGd9E,KAHc;AAIdqD,YAJc;AAKd0B,mBALc;AAMd5B,cANc;AAOb;AACD;AACI,oCAAc2B,eAAd;AACKE,cADL,CACYlB,GADZ;AAEI;AACIT,6BAAawB,YAAb,EAA2BxC,IAA3B,IAAmC4C,eAAe5C,IAAlD;AACM4C,+BAAeC,iBAAf;AACElF,qBADF;AAEEqD,4BAFF;AAGE0B,mCAHF;AAIE5B,8BAJF,CADN;;AAOM,qBARV,GAFJ;;AAYKgC,cAZL,CAYY,0BAAUC,MAAV,EAZZ,EAY8B,CAZ9B,KAYoCpF,KAbxC;;AAeH,CAvBD;AAwBA,IAAMqF,mBAAmB,SAAnBA,gBAAmB;AACrBR,YADqB;AAErBC,eAFqB;AAGrB9E,KAHqB;AAIrBqD,YAJqB;AAKrB0B,mBALqB;AAMrB5B,cANqB;AAOpB;AACD;AACI,oCAAc2B,eAAd;AACKE,cADL,CACYlB,GADZ;AAEI;AACIiB,oCAAoBF,YAApB,EAAkCxC,IAAlC,IAA0C4C,eAAe5C,IAAzD;AACM4C,+BAAeK,iBAAf;AACEtF,qBADF;AAEEqD,4BAFF;AAGE0B,mCAHF;AAIE5B,8BAJF,CADN;;AAOM,qBARV,GAFJ;;AAYKgC,cAZL,CAYY,0BAAUC,MAAV,EAZZ,EAY8B,CAZ9B,KAYoCpF,KAbxC;;AAeH,CAvBD;;AAyBA,IAAMuF,oBAAoB,SAApBA,iBAAoB,OAAQ;AAC9B,QAAMC,yBAAyBH;AAC3B,WAD2B;AAE3B5B,SAAKvD,MAFsB;AAG3BuD,SAAKzD,KAHsB;AAI3ByD,SAAKJ,YAJsB;AAK3BI,SAAKsB,mBALsB;AAM3BtB,SAAKN,cANsB,CAA/B;;AAQA,QAAMsC,kBAAkBb;AACpB,WADoB;AAEpBnB,SAAKvD,MAFe;AAGpBsF,0BAHoB;AAIpB/B,SAAKJ,YAJe;AAKpBI,SAAKsB,mBALe;AAMpBtB,SAAKN,cANe,CAAxB;;AAQA,QAAMuC,sBAAsBd;AACxB,eADwB;AAExBnB,SAAKtD,UAFmB;AAGxBsF,mBAHwB;AAIxBhC,SAAKJ,YAJmB;AAKxBI,SAAKsB,mBALmB;AAMxBtB,SAAKN,cANmB,CAA5B;;AAQA,QAAMwC,2BAA2BN;AAC7B,eAD6B;AAE7B5B,SAAKtD,UAFwB;AAG7BuF,uBAH6B;AAI7BjC,SAAKJ,YAJwB;AAK7BI,SAAKsB,mBALwB;AAM7BtB,SAAKN,cANwB,CAAjC;;AAQA,WAAOwC,wBAAP;AACH,CAlCD;AAmCA;AACA3F,MAAM4F,SAAN,GAAkB,oBAAS,YAAM;AAC7B,WAAO5F,MAAMC,IAAN,CAAWS,KAAX,CAAiBP,UAAxB;AACH,CAFiB,CAAlB;AAGAH,MAAM8B,MAAN,GAAe,oBAAS,YAAM;AAC1B,WAAO9B,MAAMC,IAAN,CAAW6B,MAAlB;AACH,CAFc,CAAf;AAGA9B,MAAMU,KAAN,GAAc,oBAAS,YAAM;AACzB,WAAOV,MAAMC,IAAN,CAAWS,KAAlB;AACH,CAFa,CAAd;AAGAV,MAAMW,IAAN,GAAa,oBAAS,YAAM;AACxB,WAAOX,MAAMC,IAAN,CAAWS,KAAX,CAAiBC,IAAxB;AACH,CAFY,CAAb;AAGAX,MAAM6F,iBAAN,GAA0B,oBAAS,YAAM;AACrC,WAAO7F,MAAMC,IAAN,CAAW6B,MAAX,CAAkBC,WAAzB;AACH,CAFyB,CAA1B;AAGA/B,MAAM8F,cAAN,GAAuB,oBAAS,YAAM;AAClC,WAAO9F,MAAMC,IAAN,CAAW6B,MAAX,CAAkBkB,QAAzB;AACH,CAFsB,CAAvB;;AAIA;AACAhD,MAAM+F,WAAN,GAAoB,kBAAO,UAAU/F,KAAV,EAAiB;AACxCA,UAAMC,IAAN,GAAaD,MAAMC,IAAnB;AACAD,UAAMsD,WAAN,GAAoBtD,MAAMsD,WAA1B;AACAtD,UAAMuD,KAAN,GAAcvD,MAAMuD,KAApB;AACH,CAJmB,CAApB;;AAMAvD,MAAMgG,UAAN,GAAmB,kBAAO,UAAU/F,IAAV,EAAgB;AACtCD,UAAMC,IAAN,gBAAkBD,MAAMC,IAAxB,EAAiCA,IAAjC;AACH,CAFkB,CAAnB;AAGAD,MAAMiG,WAAN,GAAoB,kBAAO,UAAUvF,KAAV,EAAiB;AACxCV,UAAMgG,UAAN,CAAiB,EAAEtF,oBAAYV,MAAMC,IAAN,CAAWS,KAAvB,EAAiCA,KAAjC,CAAF,EAAjB;AACH,CAFmB,CAApB;AAGAV,MAAMkG,YAAN,GAAqB,kBAAO,UAAUpE,MAAV,EAAkB;AAC1C9B,UAAMgG,UAAN,CAAiB,EAAElE,qBAAa9B,MAAMC,IAAN,CAAW6B,MAAxB,EAAmCA,MAAnC,CAAF,EAAjB;AACH,CAFoB,CAArB;AAGA;AACA9B,MAAMmG,QAAN,GAAiB,kBAAO,UAAUlG,IAAV,EAAgB;AACpCD,UAAMuD,KAAN,gCAAkBvD,MAAMuD,KAAxB,IAA+BtD,IAA/B;AACH,CAFgB,CAAjB;AAGAD,MAAMoG,QAAN,GAAiB,kBAAO,UAAUC,SAAV,EAAqB;AACzCrG,UAAMC,IAAN,GAAaD,MAAMuD,KAAN,CAAY8C,SAAZ,CAAb;AACH,CAFgB,CAAjB;AAGArG,MAAMsG,OAAN,GAAgB,kBAAO,kBAAU;AAC7BtG,UAAMgG,UAAN,CAAiB;AACbtF;AACOV,cAAMC,IAAN,CAAWS,KADlB;AAEImB,mBAAO,gCAAa7B,MAAMC,IAAN,CAAWS,KAAX,CAAiBE,OAA9B,CAFX;AAGID,kBAAM,CAHV,GADa,EAAjB;;;AAOH,CARe,CAAhB;AASAX,MAAMuG,QAAN,GAAiB,kBAAO,kBAAU;AAC9BvG,UAAMwG,iBAAN;;AAEA,QAAM3E,QAAQ,gCAAa7B,MAAMC,IAAN,CAAWS,KAAX,CAAiBE,OAA9B,CAAd;AACA,QAAMT,aAAa,oCAAe0B,KAAf,EAAsB7B,MAAMC,IAAN,CAAWS,KAAX,CAAiBE,OAAvC,CAAnB;AACA,QAAM6F,iBAAiB;AACnB5E,SADmB;AAEnB1B,cAFmB;AAGnBH,UAAMC,IAAN,CAAWS,KAAX,CAAiBE,OAHE,CAAvB;;AAKAZ,UAAMgG,UAAN,CAAiB;AACb5F,wBAAgB;AACZC,qBAAS,IADG;AAEZgE,kBAAM,OAFM;AAGZ/D;AACA,2KAJY,EADH;;AAObI;AACOV,cAAMC,IAAN,CAAWS,KADlB;AAEImB,mBAAO4E,cAFX;AAGItG,kCAHJ;AAIIQ,kBAAM,CAJV,GAPa,EAAjB;;;AAcH,CAxBgB,CAAjB;AAyBA;AACAX,MAAM0G,eAAN,GAAwB,kBAAO,YAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1G,UAAMiG,WAAN,CAAkB,EAAEtF,MAAMX,MAAMU,KAAN,CAAYC,IAAZ,GAAmB,IAA3B,EAAlB;AACH,CAjCuB,CAAxB;AAkCAX,MAAM2G,iBAAN,GAA0B,kBAAO;AAC7B3G,cAAM4G,YAAN,GAAqBC,YAAY7G,MAAM0G,eAAlB,EAAmC,IAAnC,CADQ,GAAP,CAA1B;;;AAIA1G,MAAMwG,iBAAN,GAA0B,kBAAO,oBAAMM,cAAc9G,MAAM4G,YAApB,CAAN,EAAP,CAA1B;;AAEA;AACA5G,MAAM+G,wBAAN,GAAiC,kBAAO,YAAM;AAC1C;AACI,KAAC,4BAAc/G,MAAMC,IAAN,CAAW6B,MAAzB,EAAiCkD,MAAjC,CAAwCgC,QAAxC,CAAiD,EAAjD,CAAD;AACA,KAAC,4BAAchH,MAAMC,IAAN,CAAW6B,MAAzB,EAAiCkD,MAAjC,CAAwCgC,QAAxC,CAAiD,CAAjD,CAFL;AAGE;AACEhH,cAAM2G,iBAAN;AACA3G,cAAMgG,UAAN,CAAiB;AACbvF,2BAAe;AACXJ,yBAAS,KADE,EADF,EAAjB;;;AAKH;AACJ,CAZgC,CAAjC;AAaAL,MAAMiH,4BAAN,GAAqC,kBAAO,YAAM;AAC9CjH,UAAMgG,UAAN,CAAiB;AACb5F,wBAAgB;AACZC,qBAAS,KADG;AAEZC,qBAAS,IAFG,EADH;;AAKbG,uBAAe;AACXJ,qBAAS,IADE,EALF,EAAjB;;;;AAUH,CAXoC,CAArC;;AAaAL,MAAMkH,YAAN,GAAqB,kBAAO,UAACC,CAAD,EAAIC,QAAJ,EAAcC,SAAd,EAA4B;AACpCvF,UADoC,GACd9B,KADc,CAC5CC,IAD4C,CACpC6B,MADoC,CAC1BlB,OAD0B,GACdZ,KADc,CAC1BY,OAD0B;AAEpD,QAAI0G,oBAAoB,IAAxB;AACA,QAAID,aAAa,OAAjB,EAA0B;AACtBC,4BAAoBC,OAAOC,QAAP,CAAgBL,EAAEM,MAAF,CAASC,KAAzB,CAApB;AACH;;AAED1H,UAAMkG,YAAN;AACQkB,YADR,EACqBE,qBAAqBH,EAAEM,MAAF,CAASC,KADnD;;AAGH,CAVoB,CAArB;AAWA1H,MAAM2H,cAAN,GAAuB,kBAAO,iBAAS;;AAEnC,QAAI,CAAC3H,MAAMC,IAAN,CAAWQ,aAAX,CAAyBJ,OAA9B,EAAuC;AACnC,gBAAQuH,MAAMC,GAAd;AACI,iBAAK,YAAL;AACI7H,sBAAM8H,UAAN,CAAiB,CAAjB,EAAoB,CAApB;AACA;;AAEJ,iBAAK,WAAL;AACI9H,sBAAM8H,UAAN,CAAiB,CAAC,CAAlB,EAAqB,CAArB;AACA;;AAEJ,iBAAK,SAAL;AACI9H,sBAAM8H,UAAN,CAAiB,CAAjB,EAAoB,CAAC,CAArB;AACA;;AAEJ,iBAAK,WAAL;AACI9H,sBAAM8H,UAAN,CAAiB,CAAjB,EAAoB,CAApB;AACA;AACJ;AACI,sBAjBR;;AAmBH;AACJ,CAvBsB,CAAvB;AAwBA9H,MAAM+H,uBAAN,GAAgC,kBAAO,oBAAMzD,iBAAE0D,QAAF,CAAWhI,MAAM2H,cAAjB,EAAiC,GAAjC,EAAsC;AAC/EM,iBAAS,IADsE,EAAtC,CAAN,EAAP,CAAhC;;;AAIA;AACAjI,MAAMkI,iBAAN,GAA0B,kBAAO,YAAM;;AAEtC,CAFyB,CAA1B;AAGAlI,MAAM8H,UAAN,GAAmB,kBAAO,UAAC7D,OAAD,EAAUC,OAAV,EAAsB;;;;AAIxClE,UAAMC,IAJkC,iCAExCS,KAFwC,CAE/BE,OAF+B,qBAE/BA,OAF+B,CAEtBiB,KAFsB,qBAEtBA,KAFsB,qCAGxCC,MAHwC,CAG9BkB,QAH8B,CAGlBC,CAHkB,yBAGlBA,CAHkB,CAGfC,CAHe,yBAGfA,CAHe,CAGZC,cAHY,yBAGZA,cAHY,CAGIE,YAHJ,yBAGIA,YAHJ;AAK5C,QAAM8E,sBAAsB9G,KAAK+G,KAAL,CAAWnE,OAAX,EAAoB,CAACC,OAArB,IAAgC,GAAhC,GAAsC7C,KAAKgH,EAAvE;AACA,QAAIF,uBAAuBhF,cAA3B,EAA2C;AACvC;AACI,aAAKc,UAAUhB,CAAf,IAAoBgB,UAAUhB,CAAV,GAAcrC,QAAQI,IAA1C;AACA,aAAKkD,UAAUhB,CADf,IACoBgB,UAAUhB,CAAV,GAActC,QAAQI,IAF9C;AAGE;AACE,gBAAM+D,sBAAsB,qCAAkB,EAAlB,EAAsBlD,KAAtB,EAA6BjB,QAAQI,IAArC,EAA2C,EAAEiC,GAAGA,IAAIgB,UAAU,CAAnB,EAAsBf,GAAGA,IAAIgB,UAAU,CAAvC,EAA3C,CAA5B;AACA,gBAAMoE,kBAAkB,qCAAkB,EAAlB,EAAsBzG,KAAtB,EAA6BjB,QAAQI,IAArC,EAA2C,EAAEiC,GAAGA,IAAIgB,OAAT,EAAkBf,GAAGA,IAAIgB,OAAzB,EAA3C,CAAxB;AACA,gBAAMqE,WAAWhD,kBAAkB;AAC/BvF,4BAD+B;AAE/BmD,gCAAgBgF,mBAFe;AAG/B9E,8BAAciF,eAHiB;AAI/BvD,wDAJ+B;AAK/B7E,0CAL+B;AAM/BC,kDAN+B,EAAlB,CAAjB;;AAQAH,kBAAM+F,WAAN,CAAkBwC,QAAlB;AACH;AACJ,KAjBD,MAiBO;AACH,YAAMC,mBAAmB,qCAAkB,EAAlB,EAAsB3G,KAAtB,EAA6BjB,QAAQI,IAArC,EAA2C,EAAEiC,GAAGA,IAAIgB,OAAT,EAAkBf,GAAGA,IAAIgB,OAAzB,EAA3C,CAAzB;AACA,YAAMoE,mBAAkB,qCAAkB,EAAlB,EAAsBzG,KAAtB,EAA6BjB,QAAQI,IAArC,EAA2C,EAAEiC,GAAGA,CAAL,EAAQC,GAAGA,CAAX,EAA3C,CAAxB;AACA,YAAMuF,yBAAyB,qCAAkB,EAAlB,EAAsB5G,KAAtB,EAA6BjB,QAAQI,IAArC,EAA2C,EAAEiC,GAAGA,IAAIgB,OAAT,EAAkBf,GAAGA,IAAIgB,OAAzB,EAA3C,CAA/B;AACA,YAAMwE,aAAanD,kBAAkB;AACjCvF,wBADiC;AAEjCmD,4BAAgBgF,mBAFiB;AAGjC9E,0BAAciF,gBAHmB;AAIjCvD,iCAAqB0D,sBAJY;AAKjCvI,sCALiC;AAMjCC,8CANiC,EAAlB,CAAnB;;AAQAH,cAAM+F,WAAN,CAAkB2C,UAAlB;AACH;AACJ,CArCkB,CAAnB;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAQ,YAAM;AACV5I,YAAQC,GAAR,CAAY,SAAZ,EAAuBC,KAAvB,EADU,CACoB;AACjC,CAFD;;AAIA2I,OAAOC,OAAP,GAAiB5I,KAAjB","file":"state.js","sourcesContent":["import { observable, action, computed, autorun, get } from 'mobx';\r\nimport { objectToArray, percentTrue } from \"../../src/Helpers/helpers\";\r\nimport { biomes, characters } from \"../../assets/characters.js\";\r\nimport {\r\n    cellsFactory,\r\n    getCellByPosition,\r\n    charactersFiller\r\n} from \"../../factories/cellsFactory.js\";\r\n\r\nimport { characterSpawn } from \"../../factories/characterSpawn.js\";\r\nimport emojis from \"../../assets/emojis.js\";\r\nimport _ from \"lodash\";\r\nconsole.log('hi')\r\nconst state = observable({\r\n    game: {\r\n        biomes,\r\n        characters,\r\n        fullScreenPane: {\r\n            visible: false,\r\n            display: \"\"\r\n        },\r\n        effectsPane: {\r\n            red: false\r\n        },\r\n        newGameWizard: {\r\n            visible: false\r\n        },\r\n        world: {\r\n            time: 0,\r\n            options: {\r\n                baseHeight: 1,\r\n                heightVariance: 0.3,\r\n                amount: 900,\r\n                side: 30,\r\n                jobs: [\"Ranger\", \"Wizard\", \"Knight\"],\r\n                races: [\"Human\", \"Mage\", \"Elf\"],\r\n                orePicker: () =>\r\n                    oreOptions[Math.floor(Math.random() * oreOptions.length)],\r\n                biomePicker: () => {\r\n                    var newBiomes = biomes;\r\n                    delete newBiomes.mountain;\r\n                    return objectToArray(newBiomes).getRandomFromObject();\r\n                }\r\n            },\r\n            cells: [],\r\n            characters: []\r\n        },\r\n        player: {\r\n            mentalState: {\r\n                interaction: \"Feeling fine...\",\r\n                environment: \"Blissful...\"\r\n            },\r\n            emoji: emojis.player,\r\n            inventory: [],\r\n            name: \"Scott\",\r\n            race: \"jewBorne\",\r\n            job: \"none\",\r\n            height: 67,\r\n            age: 27,\r\n            agility: 1,\r\n            attack: 1,\r\n            defense: 1,\r\n            health: 100,\r\n            hunger: 100,\r\n            xp: 5,\r\n            position: {\r\n                x: 1,\r\n                y: 1,\r\n                orientationDeg: \"0\",\r\n                cell: {},\r\n                movementCell: {}\r\n            }\r\n        }\r\n    },\r\n\r\n    cellHistory: [],\r\n    saves: []\r\n})\r\n\r\n//COMPUTED\r\n//Cell Helpers\r\nconst patternToOffsetArray = (args) => {\r\n    const { rOffsets, xOffsets, yOffsets } = args\r\n    let offSetArray = []\r\n    rOffsets.map(radialOffset => xOffsets.map(xOffset => yOffsets.map(yOffset => {\r\n        offSetArray.push({ x: rOffset * xOffset, y: rOffset * yOffset })\r\n    })))\r\n    return offSetArray\r\n}\r\nconst offSetsPattern = (r, type) => {\r\n    switch (type) {\r\n        case 'radar':\r\n            patternToOffsetArray({ rOffsets: _.times(r, radialOffset => radialOffset), xOffsets: [-1, 0, 1], yOffsets: [-1, 0, 1] })\r\n            break;\r\n        case 'view':\r\n            patternToOffsetArray({ rOffsets: _.times(r, radialOffset => radialOffset), xOffsets: [0, 1], yOffsets: [-1, 0, 1] })\r\n            break;\r\n        case 'front':\r\n            patternToOffsetArray({ rOffsets: _.times(r, radialOffset => radialOffset), xOffsets: [1], yOffsets: [-1, 0, 1] })\r\n\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}\r\nconst cellList = (cell, character, offSetArray) => {\r\n    var callList = []\r\n    xOffsets.map(xOffset => yOffsets.map(yOffset => {\r\n        callList.push(getCellByPosition({ x: cell.position.x + xOffset, y: cell.position.y + yOffset }))\r\n    }))\r\n    return cellList\r\n}\r\n\r\nconst checkCell = (\r\n    categoryName,\r\n    categoryOptions,\r\n    state,\r\n    movementCell,\r\n    forwardMovementCell,\r\n    orientationDeg\r\n) => {\r\n    return (\r\n        objectToArray(categoryOptions)\r\n            .values.map(\r\n            categoryOption =>\r\n                movementCell[categoryName].name == categoryOption.name\r\n                    ? categoryOption.playerInteraction(\r\n                        state,\r\n                        movementCell,\r\n                        forwardMovementCell,\r\n                        orientationDeg\r\n                    )\r\n                    : false\r\n            )\r\n            .filter(option => option)[0] || state\r\n    );\r\n}\r\nconst checkDistantCell = (\r\n    categoryName,\r\n    categoryOptions,\r\n    state,\r\n    movementCell,\r\n    forwardMovementCell,\r\n    orientationDeg\r\n) => {\r\n    return (\r\n        objectToArray(categoryOptions)\r\n            .values.map(\r\n            categoryOption =>\r\n                forwardMovementCell[categoryName].name == categoryOption.name\r\n                    ? categoryOption.playerDistantView(\r\n                        state,\r\n                        movementCell,\r\n                        forwardMovementCell,\r\n                        orientationDeg\r\n                    )\r\n                    : false\r\n            )\r\n            .filter(option => option)[0] || state\r\n    );\r\n}\r\n\r\nconst checkMovementCell = args => {\r\n    const distantBiomeCheckState = checkDistantCell(\r\n        \"biome\",\r\n        args.biomes,\r\n        args.state,\r\n        args.movementCell,\r\n        args.forwardMovementCell,\r\n        args.orientationDeg\r\n    );\r\n    const biomeCheckState = checkCell(\r\n        \"biome\",\r\n        args.biomes,\r\n        distantBiomeCheckState,\r\n        args.movementCell,\r\n        args.forwardMovementCell,\r\n        args.orientationDeg\r\n    );\r\n    const characterCheckState = checkCell(\r\n        \"character\",\r\n        args.characters,\r\n        biomeCheckState,\r\n        args.movementCell,\r\n        args.forwardMovementCell,\r\n        args.orientationDeg\r\n    );\r\n    const characterAheadCheckState = checkDistantCell(\r\n        \"character\",\r\n        args.characters,\r\n        characterCheckState,\r\n        args.movementCell,\r\n        args.forwardMovementCell,\r\n        args.orientationDeg\r\n    );\r\n    return characterAheadCheckState;\r\n}\r\n////Basic Computed\r\nstate.charaters = computed(() => {\r\n    return state.game.world.characters\r\n})\r\nstate.player = computed(() => {\r\n    return state.game.player\r\n})\r\nstate.world = computed(() => {\r\n    return state.game.world\r\n})\r\nstate.time = computed(() => {\r\n    return state.game.world.time\r\n})\r\nstate.playerMentalState = computed(() => {\r\n    return state.game.player.mentalState\r\n})\r\nstate.playerPosition = computed(() => {\r\n    return state.game.player.position\r\n})\r\n\r\n//Updaters\r\nstate.updateState = action(function (state) {\r\n    state.game = state.game\r\n    state.cellHistory = state.cellHistory\r\n    state.saves = state.saves\r\n})\r\n\r\nstate.updateGame = action(function (game) {\r\n    state.game = { ...state.game, ...game }\r\n})\r\nstate.updateWorld = action(function (world) {\r\n    state.updateGame({ world: { ...state.game.world, ...world } })\r\n})\r\nstate.updatePlayer = action(function (player) {\r\n    state.updateGame({ player: { ...state.game.player, ...player } })\r\n})\r\n//Game Controls\r\nstate.saveGame = action(function (game) {\r\n    state.saves = [...state.saves, game]\r\n})\r\nstate.loadGame = action(function (gameIndex) {\r\n    state.game = state.saves[gameIndex]\r\n})\r\nstate.newGame = action(player => {\r\n    state.updateGame({\r\n        world: {\r\n            ...state.game.world,\r\n            cells: cellsFactory(state.game.world.options),\r\n            time: 0\r\n        }\r\n    })\r\n})\r\nstate.newWorld = action(player => {\r\n    state.clearGameInterval()\r\n\r\n    const cells = cellsFactory(state.game.world.options);\r\n    const characters = characterSpawn(cells, state.game.world.options);\r\n    const characterCells = charactersFiller(\r\n        cells,\r\n        characters,\r\n        state.game.world.options\r\n    );\r\n    state.updateGame({\r\n        fullScreenPane: {\r\n            visible: true,\r\n            type: \"start\",\r\n            display:\r\n            \"You awake on a new world. There are beaches, forests and mountains full of new friends, adventures, and unspeakable dangers. Proceed with wonder and caution.\"\r\n        },\r\n        world: {\r\n            ...state.game.world,\r\n            cells: characterCells,\r\n            characters,\r\n            time: 0\r\n        }\r\n    })\r\n})\r\n//Time Managment\r\nstate.gameTimeHandler = action(() => {\r\n    // const hungerRate = 0.01;\r\n    // const newHunger = (state.game.player.hunger - hungerRate)\r\n    //   .toString()\r\n    //   .slice(\r\n    //   0,\r\n    //   Math.ceil(Math.log10(state.game.player.hunger)) -\r\n    //   Math.log10(hungerRate) +\r\n    //   1\r\n    //   );\r\n    // const isStarved = newHunger < 0;\r\n    // isStarved ? clearInterval(state.gameInterval) : null;\r\n    // \r\n    // state.updateGame(\r\n    //   {\r\n    //     ...state.game,\r\n    //     world: {\r\n    //       ...state.game.world,\r\n    //       time: state.game.world.time + 0.5\r\n    //     },\r\n    //     player: {\r\n    //       ...state.game.player,\r\n    //       hunger: newHunger\r\n    //     },\r\n    //     fullScreenPane: {\r\n    //       visible: isStarved,\r\n    //       display: isStarved ? \"You starved to death!\" : null\r\n    //     },\r\n    //     effectsPane: {\r\n    //       hit: false\r\n    //     }\r\n    //   });\r\n    state.updateWorld({ time: state.world.time + 1000 })\r\n})\r\nstate.startGameInterval = action(() =>\r\n    state.gameInterval = setInterval(state.gameTimeHandler, 1000)\r\n)\r\n\r\nstate.clearGameInterval = action(() => clearInterval(state.gameInterval))\r\n\r\n//Human Interaction\r\nstate.handleNewGameWizardClick = action(() => {\r\n    if (\r\n        !objectToArray(state.game.player).values.includes(\"\") ||\r\n        !objectToArray(state.game.player).values.includes(0)\r\n    ) {\r\n        state.startGameInterval()\r\n        state.updateGame({\r\n            newGameWizard: {\r\n                visible: false\r\n            }\r\n        })\r\n    }\r\n})\r\nstate.handleFullScreenDisplayClick = action(() => {\r\n    state.updateGame({\r\n        fullScreenPane: {\r\n            visible: false,\r\n            display: null\r\n        },\r\n        newGameWizard: {\r\n            visible: true\r\n        }\r\n\r\n    })\r\n})\r\n\r\nstate.inputHandler = action((e, inputKey, inputType) => {\r\n    const { game: { player }, options } = state;\r\n    var targetValueNumber = null;\r\n    if (inputType == \"range\") {\r\n        targetValueNumber = Number.parseInt(e.target.value);\r\n    }\r\n\r\n    state.updatePlayer({\r\n        [`${inputKey}`]: targetValueNumber || e.target.value\r\n    });\r\n})\r\nstate.handleKeyPress = action(event => {\r\n\r\n    if (!state.game.newGameWizard.visible) {\r\n        switch (event.key) {\r\n            case \"ArrowRight\":\r\n                state.movePlayer(1, 0);\r\n                break;\r\n\r\n            case \"ArrowLeft\":\r\n                state.movePlayer(-1, 0);\r\n                break;\r\n\r\n            case \"ArrowUp\":\r\n                state.movePlayer(0, -1);\r\n                break;\r\n\r\n            case \"ArrowDown\":\r\n                state.movePlayer(0, 1);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n})\r\nstate.handleKeyPressThrottled = action(() => _.throttle(state.handleKeyPress, 100, {\r\n    leading: true\r\n}));\r\n\r\n//Player Movement\r\nstate.movePlayerForward = action(() => {\r\n\r\n})\r\nstate.movePlayer = action((xOffset, yOffset) => {\r\n    const {\r\n        world: { options, cells },\r\n        player: { position: { x, y, orientationDeg, movementCell } }\r\n    } = state.game;\r\n    const movementOrientation = Math.atan2(xOffset, -yOffset) * 180 / Math.PI;\r\n    if (movementOrientation == orientationDeg) {\r\n        if (\r\n            0 <= xOffset + x && xOffset + x < options.side &&\r\n            0 <= yOffset + y && yOffset + y < options.side\r\n        ) {\r\n            const forwardMovementCell = getCellByPosition({}, cells, options.side, { x: x + xOffset * 2, y: y + yOffset * 2 })\r\n            const newMovementCell = getCellByPosition({}, cells, options.side, { x: x + xOffset, y: y + yOffset });\r\n            const newState = checkMovementCell({\r\n                state,\r\n                orientationDeg: movementOrientation,\r\n                movementCell: newMovementCell,\r\n                forwardMovementCell,\r\n                biomes,\r\n                characters\r\n            });\r\n            state.updateState(newState);\r\n        }\r\n    } else {\r\n        const turnMovementCell = getCellByPosition({}, cells, options.side, { x: x + xOffset, y: y + yOffset });\r\n        const newMovementCell = getCellByPosition({}, cells, options.side, { x: x, y: y });\r\n        const newForwardMovementCell = getCellByPosition({}, cells, options.side, { x: x + xOffset, y: y + yOffset });\r\n        const finalState = checkMovementCell({\r\n            state,\r\n            orientationDeg: movementOrientation,\r\n            movementCell: newMovementCell,\r\n            forwardMovementCell: newForwardMovementCell,\r\n            biomes,\r\n            characters\r\n        });\r\n        state.updateState(finalState)\r\n    }\r\n})\r\n//  handleMoveCharacters = that => {\r\n//     const {\r\n//       options,\r\n//       game,\r\n//       game: { world, world: { cells, characters } }\r\n//     } = that.state;\r\n//     var nextPositionCharacters = [];\r\n//     characters.map(character => {\r\n//       const { position, position: { x, y, orientationDeg } } = character;\r\n//       const nextCharacter = {\r\n//         ...character,\r\n//         position: {\r\n//           ...position,\r\n//           x: x + Math.floor(Math.sin(orientationDeg * Math.PI / 180)),\r\n//           y: y + Math.floor(Math.cos(orientationDeg * Math.PI / 180))\r\n//         }\r\n//       };\r\n//       nextPositionCharacters = [...nextPositionCharacters, nextCharacter];\r\n//     });\r\n//     const newCells = charactersFiller(cells, nextPositionCharacters, options);\r\n\r\n//     that.setState({\r\n//       ...that.state,\r\n//       game: {\r\n//         ...game,\r\n//         world: { ...world, cells: newCells, characters: nextPositionCharacters }\r\n//       }\r\n//     });\r\n//   };\r\nautorun(() => {\r\n    console.log('autorun', state) // get can track not yet existing properties\r\n})\r\n\r\nmodule.exports = state;\r\n\r\n"]}