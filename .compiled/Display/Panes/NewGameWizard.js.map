{"version":3,"sources":["../../../src/Display/Panes/NewGameWizard.jsx"],"names":["NewGameWizard","getInput","player","props","key","inputHandler","e","Number","parseInt","xp","defense","attack","agility","margin","visible","newGameWizard","handleClick","options","world","width","height","backgroundColor","position","top","zIndex","justifyContent","alignItems","display","fontFamily","backgroundImage","padding","flexDirection","textAlign","fontSize","lineHeight","flex","map","toUpperCase","slice","Component"],"mappings":"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","file":"NewGameWizard.js","sourcesContent":["import React, { Component } from \"react\";\r\n//  <select\r\n//                 label=\"player race\"\r\n//                 value={player.race}\r\n//                 onChange={e => this.props.inputHandler(e, \"race\")}\r\n//               >\r\n//                 {options.races.map(race => (\r\n//                   <option value={race}>{race}</option>\r\n//                 ))}\r\n//               </select>\r\nexport default class NewGameWizard extends Component {\r\n  getInput = key => {\r\n    const { player } = this.props;\r\n    switch (typeof player[key]) {\r\n      case \"string\":\r\n        return (\r\n          <input\r\n            label={key}\r\n            value={player[key]}\r\n            onChange={e => this.props.inputHandler(e, key, \"textBox\")}\r\n          />\r\n        );\r\n        break;\r\n      case \"number\":\r\n        return [\r\n          <input\r\n            label={key}\r\n            type={\"range\"}\r\n            defaultValue={player[key]}\r\n            min={1}\r\n            max={\r\n              key == \"age\" ? (\r\n                254\r\n              ) : (\r\n                Number.parseInt(\r\n                  player.xp +\r\n                    player[key] -\r\n                    (player.defense + player.attack + player.agility)\r\n                )\r\n              )\r\n            }\r\n            step={1}\r\n            onChange={e => this.props.inputHandler(e, key, \"range\")}\r\n          />,\r\n          <h5 style={{ margin: 0 }}>{player[key]}</h5>\r\n        ];\r\n\r\n        break;\r\n\r\n      default:\r\n        return (\r\n          <input\r\n            label={key}\r\n            value={player[key]}\r\n            onChange={e => this.props.inputHandler(e, key, \"textBox\")}\r\n          />\r\n        );\r\n        break;\r\n    }\r\n  };\r\n  render() {\r\n    const {\r\n      newGameWizard: { visible },\r\n      inputHandler,\r\n      handleClick,\r\n      world: { options },\r\n      player\r\n    } = this.props;\r\n    return (\r\n      visible && (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"80%\",\r\n            backgroundColor: \"rgba(0,0,0,0.5)\",\r\n            position: \"fixed\",\r\n            top: 0,\r\n            zIndex: 10,\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            display: \"flex\",\r\n            fontFamily: \"Josefin Slab\"\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              backgroundImage:\r\n                \"url(https://images.template.net/wp-content/uploads/2017/01/07045821/White-Parchment-Paper-Texture.jpg)\",\r\n              width: \"50%\",\r\n              height: \"50%\",\r\n              backgroundColor: \"white\",\r\n              position: \"initial\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              zIndex: 100,\r\n              padding: \"20px\",\r\n              flexDirection: \"row\",\r\n              textAlign: \"center\",\r\n              fontSize: \"1.4em\",\r\n              lineHeight: \"1.4\"\r\n            }}\r\n          >\r\n            <div style={{ display: \"flex\", flex: 1, flexDirection: \"column\" }}>\r\n              {[\r\n                \"name\",\r\n                \"race\",\r\n                \"job\",\r\n                \"age\",\r\n                \"defense\",\r\n                \"attack\",\r\n                \"agility\"\r\n              ].map(key => (\r\n                <div\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <h5 style={{ margin: 0 }}>\r\n                    {key[0].toUpperCase() + key.slice(1)}\r\n                  </h5>\r\n                  {this.getInput(key)}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <button onClick={handleClick}>Start</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\n"]}